generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//CHIRP APP
model Post {
  id        String   @id
  createdAt DateTime @default(now())
  content   String   @db.VarChar(255)
  authorId  String

  @@index([authorId])
}

//POKEMON APP
model Vote {
  id  String @id @default(cuid())
  createdAt DateTime @default(now())

  votedFor Pokemon @relation(name:"votesFor", fields: [votedForId], references: [id])
  votedForId Int

  votedAgainst Pokemon @relation(name:"votesAgainst", fields: [votedAgainstId], references: [id])
  votedAgainstId Int  

  @@index([votedForId])
  @@index([votedAgainstId])
}

model Pokemon {
  id  Int @id 

  name String
  spriteUrl String

  VoteFor Vote[] @relation(name:"votesFor")
  VoteAgainst Vote[] @relation(name:"votesAgainst")

  smashCount Int @default(0)
  passCount Int @default(0)

}

//TYPEPILLED APP
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    leaderboardentries Leaderboard[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Leaderboard {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  type      String
  wpm       Int 
  accuracy  Int
  wordcount Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String


  @@index([userId])
}